#!/bin/bash
##nmcli device wifi list | sed '/IN-USE/d;/\*/d' | awk '{print $1}' | dmenu -l 10
##nmcli device wifi list | sed '/IN-USE/d;/\*/d;s/Infra.*//g;s/^\s*//g' | dmenu -l 10
### Gentoo
#chosen=$(nmcli device wifi list | sed '/IN-USE/d;/\*/d;s/Infra.*//g;s/^\s*//g;s/\s*$//g' | dmenu -l 10 -p "Available wifi:")
### Arch Linux
##chosen=$(nmcli device wifi list | sed '/IN-USE/d;/\*/d;s/Infra.*//g;s/.*:[0-9A-Z]\{2\}\s\+//g;s/\s*$//g' | dmenu -l 10 -p "Available wifi:")
#password=$(echo | dmenu -p "Password:")
#nmcli device wifi connect "$chosen" password "$password"

##############
## New Page ##
##############
if command -v nmcli &> /dev/null; then
  #chosen=$(nmcli device wifi list | dmenu -l 10 -p "Available wifi:" | sed 's/\([0-9A-F]\{2\}:\)\{5\}[0-9A-F]\{2\}  //g;s/Infra  [0-9]\{1,3\}\ *//g;s/\(IN-USE\|BSSID\|MODE\|CHAN\)\ \+//g;s/^\*\ */* /g;s/^\ \+/  /g;s/^SSID/  SSID/g')
  chosen=$(nmcli device wifi list | sed 's/\([0-9A-F]\{2\}:\)\{5\}[0-9A-F]\{2\}  //g;s/Infra  [0-9]\{1,3\}\ *//g;s/\(IN-USE\|BSSID\|MODE\|CHAN\)\ \+//g;s/^\*\ */* /g;s/^\ \+/  /g;s/^SSID/  SSID/g' | dmenu -l 10 -p "Available wifi:" )
  printf "chosen = $chosen\n"
  #processed=$(echo $chosen | sed 's/[0-9]\{2,3\} Mbit.*//g;s/^\ +//g')
  processed=$(echo $chosen | sed 's/[0-9]\{2,3\} Mbit.*//g;s/^\ \+//g;s/\ \+$//g')
  #SSID=$(echo $chosen | sed 's/[0-9]\{2,3\} Mbit.*//g;s/^\ \+//g;s/\ \+$//g')
  printf "processed = ${processed}XYZ\n"
  [ "$processed" = "" ] && printf "exit 0\n" && exit 0
  #if [[ "$chosen" = "Gia Nguyen"* ]]; then
  #  password="khongcomatkhau"
  #else
  #  #password=$(echo | dmenu -p "Password:")
  #  password=$(echo | dmenu -p "Password ($processed):")
  #fi
  #nmcli device wifi connect "$processed" password "$password"
  #nmcli device wifi connect "$processed" 2>/dev/null || password=$(echo | dmenu -p "Password ($processed):") && nmcli device wifi connect "$processed" password "$password" && notify-send "Successfully connected to $processed"
  password=$(echo | dmenu -p "Password ($processed):") && nmcli device wifi connect "$processed" password "$password" && notify-send "Successfully connected to $processed"
elif command -v connmanctl &> /dev/null; then
  #chosen=$(connmanctl services | dmenu -l 10 -p "Available wifi:" )
  #printf "chosen = $chosen\n"
  cache="/tmp/connmanAP"
  # (optional ?) scan wifi
  #connmanctl scan wifi
  connmanctl services > "$cache"
  #chosen=$(cat /tmp/connmanAP | sed '/hidden_managed_psk/d;s/ \+wifi_.*_managed.*//g' | dmenu -l 10 -p "Available wifi:")
  chosen=$(cat "$cache" | sed '/hidden_managed_psk/d;s/ \+wifi_[a-z0-9]\+_[a-z0-9]\+_managed.*//g' | dmenu -l 10 -p "Available wifi:")
  printf "\$chosen = $chosen\n"
  printf "\${chosen:1:3} = ${chosen:1:3}\n"
  ## Devil hides in the detail.
  ##if [[ "${chosen:1:3}" = "AO" ]]; then
  ##elif [[ "${chosen:1:3}" = "A " ]]; then
  #if [ "${chosen:1:3}" = "AO" ]; then
  #  echo "wifiAP already connected, no action will be taken."
  #elif [ "${chosen:1:3}" = "A " ]; then
  #  echo no
  #else
  #  echo no yes
  #fi
  marker=${chosen:1:3}
  printf "\$marker = $marker\n"
  if [[ "$marker" =~ "AO" ]]; then
    echo "wifiAP already connected, no action will be taken.\nexit 0"
    exit 0
  elif [[ "$marker" =~ "A " ]]; then
    #printf "echo \${chosen:2:} = $(echo ${chosen:2:})\n"
    printf "\${chosen:2:} = ${chosen:2:}\n"
    printf "\${chosen:2:} = ${chosen:2:}\n"
    printf "\${chosen:2} = ${chosen:2}\n"
    #printf "\$chosen = $chosen\n"
    ssid=$(echo ${chosen:2} | sed 's/^\ \+//g')
    #ssid=$(echo "${chosen:2:}")
    printf "\$ssid = $ssid\n"
  else
    ssid=$(echo "$chosen" | sed 's/^\ \+//g')
    #ssid=$(echo "${chosen}")
    #ssid=$(echo "$chosen")
    #printf "echo \"\$chosen\" = $(echo "$chosen")\n"
    #printf "echo \${chosen} = $(echo ${chosen})\n"
    printf "\$ssid = $ssid\n"
    echo nothing
  fi
  printf "grep ssid\n"
  cat "$cache" | grep "$ssid"
  wifi_id=$(cat "$cache" | grep "$ssid" | sed 's/.*\ \+wifi_/wifi_/g')
  printf "\$wifi_id =\n$wifi_id\n"
  connmanctl connect "$wifi_id"
else
    echo "None of nmcli, connmanctl exists on your machine. Consider installing them before using this script. (On Arch-based distros, do: sudo pacman -S [networkmanager|connman])"
fi

